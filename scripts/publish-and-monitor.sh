#!/bin/bash
# Script d'automatisation compl√®te : Publication Internal + Surveillance 48h
# Publie l'AAB sur le track Internal et lance automatiquement la surveillance de stabilit√©

set -euo pipefail

# Configuration par d√©faut
PACKAGE_NAME="com.example.n8nmonitor"
SKIP_BUILD=false
SKIP_TESTS=false
AUTO_PROMOTE=false
MONITORING_HOURS=48
CRASH_THRESHOLD=2.0
ANR_THRESHOLD=1.0
VERBOSE=false

# R√©pertoires
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Charger les variables d'environnement depuis .env
echo "üîß Chargement de la configuration..."
if [[ -f "$SCRIPT_DIR/load-env.sh" ]]; then
    source "$SCRIPT_DIR/load-env.sh"
else
    echo "‚ö†Ô∏è  Script load-env.sh non trouv√©. Variables d'environnement non charg√©es." >&2
fi

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color

# Fonction d'affichage avec couleur
log_message() {
    local message="$1"
    local color="${2:-$NC}"
    echo -e "${color}${message}${NC}"
}

# Fonction d'aide
show_help() {
    cat << EOF
üöÄ Script d'Automatisation Compl√®te - Publication Internal + Surveillance

Ce script automatise le processus complet de publication sur Google Play Store :
1. Construction de l'AAB (optionnel)
2. Ex√©cution des tests (optionnel)
3. Publication sur le track Internal
4. Surveillance automatique des m√©triques pendant 48h
5. Promotion automatique vers Production (optionnel)

USAGE:
    $0 [OPTIONS]

OPTIONS:
    --package-name STRING     Nom du package Android (d√©faut: com.example.n8nmonitor)
    --skip-build             Ignorer la construction de l'AAB
    --skip-tests             Ignorer l'ex√©cution des tests
    --auto-promote           Promotion automatique vers Production si m√©triques OK
    --monitoring-hours INT   Dur√©e de surveillance en heures (d√©faut: 48)
    --crash-threshold FLOAT  Seuil de crash rate en % (d√©faut: 2.0)
    --anr-threshold FLOAT    Seuil d'ANR rate en % (d√©faut: 1.0)
    --verbose                Mode verbeux
    --help                   Affiche cette aide

EXEMPLES:
    # Publication compl√®te avec surveillance standard
    $0
    
    # Publication rapide sans tests avec promotion automatique
    $0 --skip-tests --auto-promote
    
    # Publication avec surveillance personnalis√©e (24h, seuils stricts)
    $0 --monitoring-hours 24 --crash-threshold 1.0 --anr-threshold 0.5
    
    # Surveillance uniquement (AAB d√©j√† publi√©)
    $0 --skip-build --skip-tests

PR√âREQUIS:
    - Google Play Console configur√©
    - Credentials GOOGLE_PLAY_JSON_KEY_PATH ou GOOGLE_PLAY_JSON_KEY_DATA
    - Fastlane install√© et configur√©
    - AAB sign√© disponible (si --skip-build non sp√©cifi√©)

FLUX COMPLET:
    üì± Construction AAB ‚Üí üß™ Tests ‚Üí üì§ Publication Internal ‚Üí üìä Surveillance 48h ‚Üí üöÄ Production
EOF
}

# Parsing des arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --package-name)
            PACKAGE_NAME="$2"
            shift 2
            ;;
        --skip-build)
            SKIP_BUILD=true
            shift
            ;;
        --skip-tests)
            SKIP_TESTS=true
            shift
            ;;
        --auto-promote)
            AUTO_PROMOTE=true
            shift
            ;;
        --monitoring-hours)
            MONITORING_HOURS="$2"
            shift 2
            ;;
        --crash-threshold)
            CRASH_THRESHOLD="$2"
            shift 2
            ;;
        --anr-threshold)
            ANR_THRESHOLD="$2"
            shift 2
            ;;
        --verbose)
            VERBOSE=true
            shift
            ;;
        --help)
            show_help
            exit 0
            ;;
        *)
            echo "Option inconnue: $1"
            show_help
            exit 1
            ;;
    esac
done

# Validation des param√®tres
if [[ $MONITORING_HOURS -le 0 ]]; then
    log_message "‚ùå La dur√©e de surveillance doit √™tre positive" "$RED"
    exit 1
fi

if [[ $(echo "$CRASH_THRESHOLD <= 0" | bc -l) -eq 1 ]] || [[ $(echo "$ANR_THRESHOLD <= 0" | bc -l) -eq 1 ]]; then
    log_message "‚ùå Les seuils doivent √™tre positifs" "$RED"
    exit 1
fi

# V√©rification des pr√©requis
test_prerequisites() {
    log_message "üîç V√©rification des pr√©requis..." "$YELLOW"
    
    # V√©rifier Fastlane
    if command -v fastlane >/dev/null 2>&1; then
        log_message "   ‚úÖ Fastlane install√©" "$GREEN"
    else
        log_message "   ‚ùå Fastlane non trouv√©. Installez-le avec: gem install fastlane" "$RED"
        return 1
    fi
    
    # V√©rifier les credentials Google Play
    if [[ -z "${GOOGLE_PLAY_JSON_KEY_PATH:-}" && -z "${GOOGLE_PLAY_JSON_KEY_DATA:-}" ]]; then
        log_message "   ‚ùå Credentials Google Play non configur√©s!" "$RED"
        log_message "      Configurez GOOGLE_PLAY_JSON_KEY_PATH ou GOOGLE_PLAY_JSON_KEY_DATA" "$RED"
        return 1
    fi
    
    if [[ -n "${GOOGLE_PLAY_JSON_KEY_PATH:-}" && ! -f "$GOOGLE_PLAY_JSON_KEY_PATH" ]]; then
        log_message "   ‚ùå Fichier de credentials non trouv√©: $GOOGLE_PLAY_JSON_KEY_PATH" "$RED"
        return 1
    fi
    
    log_message "   ‚úÖ Credentials Google Play configur√©s" "$GREEN"
    
    # V√©rifier les scripts de surveillance
    local monitor_script="$SCRIPT_DIR/monitor-stability.sh"
    if [[ ! -f "$monitor_script" ]]; then
        log_message "   ‚ùå Script de surveillance non trouv√©: $monitor_script" "$RED"
        return 1
    fi
    
    log_message "   ‚úÖ Script de surveillance disponible" "$GREEN"
    
    # V√©rifier les d√©pendances
    local missing_deps=()
    command -v jq >/dev/null 2>&1 || missing_deps+=("jq")
    command -v bc >/dev/null 2>&1 || missing_deps+=("bc")
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        log_message "   ‚ùå D√©pendances manquantes: ${missing_deps[*]}" "$RED"
        log_message "      Installez avec: apt-get install ${missing_deps[*]} ou brew install ${missing_deps[*]}" "$RED"
        return 1
    fi
    
    log_message "   ‚úÖ Toutes les d√©pendances sont install√©es" "$GREEN"
    
    return 0
}

# Construction de l'AAB
build_aab() {
    if [[ "$SKIP_BUILD" == "true" ]]; then
        log_message "‚è≠Ô∏è  Construction ignor√©e (--skip-build activ√©)" "$YELLOW"
        return 0
    fi
    
    log_message "üî® Construction de l'AAB..." "$YELLOW"
    
    # Nettoyage
    ./gradlew clean
    
    # Construction de l'AAB de release
    ./gradlew bundleRelease
    
    # V√©rification que l'AAB a √©t√© cr√©√©
    local aab_path="app/build/outputs/bundle/release/app-release.aab"
    if [[ -f "$aab_path" ]]; then
        local aab_size=$(du -h "$aab_path" | cut -f1)
        log_message "   ‚úÖ AAB cr√©√© avec succ√®s: $aab_path ($aab_size)" "$GREEN"
        return 0
    else
        log_message "   ‚ùå AAB non trouv√© apr√®s construction" "$RED"
        return 1
    fi
}

# Ex√©cution des tests
run_tests() {
    if [[ "$SKIP_TESTS" == "true" ]]; then
        log_message "‚è≠Ô∏è  Tests ignor√©s (--skip-tests activ√©)" "$YELLOW"
        return 0
    fi
    
    log_message "üß™ Ex√©cution des tests..." "$YELLOW"
    
    # Tests unitaires
    ./gradlew test
    
    # Tests d'instrumentation (optionnel, peut n√©cessiter un √©mulateur)
    # ./gradlew connectedAndroidTest
    
    log_message "   ‚úÖ Tests ex√©cut√©s avec succ√®s" "$GREEN"
    return 0
}

# Publication sur le track Internal
publish_to_internal() {
    log_message "üì§ Publication sur le track Internal..." "$YELLOW"
    
    # Utilisation de Fastlane pour publier
    fastlane android internal
    
    log_message "   ‚úÖ Publication r√©ussie sur le track Internal" "$GREEN"
    log_message "   üåê V√©rifiez dans Google Play Console: https://play.google.com/console/developers" "$CYAN"
    return 0
}

# Surveillance des m√©triques
start_monitoring() {
    log_message "üìä D√©marrage de la surveillance des m√©triques..." "$YELLOW"
    log_message "   ‚è±Ô∏è  Dur√©e: $MONITORING_HOURS heures" "$CYAN"
    log_message "   üéØ Seuils: Crash < $CRASH_THRESHOLD%, ANR < $ANR_THRESHOLD%" "$CYAN"
    
    local monitor_script="$SCRIPT_DIR/monitor-stability.sh"
    local monitor_args=("--package-name" "$PACKAGE_NAME" "--monitoring-hours" "$MONITORING_HOURS" "--crash-threshold" "$CRASH_THRESHOLD" "--anr-threshold" "$ANR_THRESHOLD")
    
    if [[ "$VERBOSE" == "true" ]]; then
        monitor_args+=("--verbose")
    fi
    
    # Lancement du script de surveillance
    if "$monitor_script" "${monitor_args[@]}"; then
        log_message "   ‚úÖ Surveillance termin√©e - M√©triques conformes" "$GREEN"
        return 0
    else
        log_message "   ‚ùå Surveillance termin√©e - M√©triques non conformes" "$RED"
        return 1
    fi
}

# Promotion vers Production
promote_to_production() {
    if [[ "$AUTO_PROMOTE" != "true" ]]; then
        log_message "ü§î Promotion manuelle requise" "$YELLOW"
        log_message "   Pour promouvoir vers Production, ex√©cutez:" "$CYAN"
        log_message "   fastlane android production" "$CYAN"
        return 0
    fi
    
    log_message "üöÄ Promotion automatique vers Production..." "$YELLOW"
    
    fastlane android production
    
    log_message "   ‚úÖ Promotion r√©ussie vers Production" "$GREEN"
    log_message "   üéâ Application disponible en Production!" "$GREEN"
    return 0
}

# Fonction principale
start_publish_and_monitor() {
    local start_time=$(date +%s)
    
    log_message "" "$NC"
    log_message "üöÄ D√âMARRAGE DU PROCESSUS COMPLET DE PUBLICATION" "$GREEN"
    log_message "" "$NC"
    log_message "üì± Package: $PACKAGE_NAME" "$CYAN"
    log_message "‚è±Ô∏è  Surveillance: $MONITORING_HOURS heures" "$CYAN"
    log_message "üéØ Seuils: Crash < $CRASH_THRESHOLD%, ANR < $ANR_THRESHOLD%" "$CYAN"
    log_message "ü§ñ Promotion auto: $(if [[ "$AUTO_PROMOTE" == "true" ]]; then echo 'Activ√©e'; else echo 'D√©sactiv√©e'; fi)" "$CYAN"
    log_message "" "$NC"
    
    # √âtape 1: V√©rification des pr√©requis
    log_message "üìã √âTAPE 1/5: V√©rification des pr√©requis" "$MAGENTA"
    if ! test_prerequisites; then
        log_message "‚ùå √âchec des pr√©requis" "$RED"
        return 1
    fi
    log_message "" "$NC"
    
    # √âtape 2: Construction
    log_message "üìã √âTAPE 2/5: Construction de l'AAB" "$MAGENTA"
    if ! build_aab; then
        log_message "‚ùå √âchec de la construction" "$RED"
        return 1
    fi
    log_message "" "$NC"
    
    # √âtape 3: Tests
    log_message "üìã √âTAPE 3/5: Ex√©cution des tests" "$MAGENTA"
    if ! run_tests; then
        log_message "‚ùå √âchec des tests" "$RED"
        return 1
    fi
    log_message "" "$NC"
    
    # √âtape 4: Publication
    log_message "üìã √âTAPE 4/5: Publication sur Internal" "$MAGENTA"
    if ! publish_to_internal; then
        log_message "‚ùå √âchec de la publication" "$RED"
        return 1
    fi
    log_message "" "$NC"
    
    # √âtape 5: Surveillance
    log_message "üìã √âTAPE 5/5: Surveillance des m√©triques" "$MAGENTA"
    local monitoring_success=false
    if start_monitoring; then
        monitoring_success=true
    fi
    log_message "" "$NC"
    
    # R√©sum√© final
    local end_time=$(date +%s)
    local total_duration=$(echo "scale=1; ($end_time - $start_time) / 3600" | bc -l)
    
    log_message "üèÅ PROCESSUS TERMIN√â" "$GREEN"
    log_message "" "$NC"
    log_message "üìä R√âSUM√â:" "$CYAN"
    log_message "   ‚è±Ô∏è  Dur√©e totale: ${total_duration} heures" "$NC"
    log_message "   üì± Package: $PACKAGE_NAME" "$NC"
    log_message "   üì§ Publication Internal: ‚úÖ R√©ussie" "$GREEN"
    
    if [[ "$monitoring_success" == "true" ]]; then
        log_message "   üìä Surveillance 48h: ‚úÖ Conforme" "$GREEN"
        if [[ "$AUTO_PROMOTE" == "true" ]]; then
            log_message "   üöÄ Statut Production: ‚úÖ Promue automatiquement" "$GREEN"
            promote_to_production
        else
            log_message "   üöÄ Statut Production: ü§î Promotion manuelle requise" "$YELLOW"
        fi
    else
        log_message "   üìä Surveillance 48h: ‚ùå Non conforme" "$RED"
        log_message "   üöÄ Statut Production: ‚ùå Promotion bloqu√©e (m√©triques non conformes)" "$RED"
    fi
    
    log_message "" "$NC"
    
    if [[ "$monitoring_success" == "true" ]]; then
        log_message "üéâ SUCC√àS: Application pr√™te pour la production!" "$GREEN"
        return 0
    else
        log_message "‚ö†Ô∏è  ATTENTION: Corrigez les probl√®mes et relancez le processus" "$YELLOW"
        return 1
    fi
}

# Changement vers le r√©pertoire du projet
cd "$PROJECT_ROOT"

# D√©marrage du processus
if start_publish_and_monitor; then
    exit 0  # Succ√®s
else
    exit 1  # √âchec
fi