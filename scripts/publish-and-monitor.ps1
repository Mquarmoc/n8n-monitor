# Script d'automatisation compl√®te : Publication Internal + Surveillance 48h
# Publie l'AAB sur le track Internal et lance automatiquement la surveillance de stabilit√©

param(
    [string]$PackageName = "com.example.n8nmonitor",
    [switch]$SkipBuild,
    [switch]$SkipTests,
    [switch]$AutoPromote,
    [int]$MonitoringHours = 48,
    [double]$CrashThreshold = 2.0,
    [double]$ANRThreshold = 1.0,
    [switch]$Verbose,
    [switch]$Help
)

# Configuration
$ErrorActionPreference = "Stop"
$ScriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path
$ProjectRoot = Split-Path -Parent $ScriptDir

# Charger les variables d'environnement depuis .env
Write-Host "[CONFIG] Chargement de la configuration..."
$envScript = Join-Path $ScriptDir "load-env.ps1"
if (Test-Path $envScript) {
    . $envScript
} else {
    Write-Warning "[!] Script load-env.ps1 non trouv√©. Variables d'environnement non charg√©es."
}

# Couleurs pour l'affichage
function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host $Message -ForegroundColor $Color
}

# Fonction d'aide
function Show-Help {
    Write-Host @"
üöÄ Script d'Automatisation Compl√®te - Publication Internal + Surveillance

Ce script automatise le processus complet de publication sur Google Play Store :
1. Construction de l'AAB (optionnel)
2. Ex√©cution des tests (optionnel)
3. Publication sur le track Internal
4. Surveillance automatique des m√©triques pendant 48h
5. Promotion automatique vers Production (optionnel)

USAGE:
    .\publish-and-monitor.ps1 [OPTIONS]

OPTIONS:
    -PackageName STRING       Nom du package Android (d√©faut: com.example.n8nmonitor)
    -SkipBuild               Ignorer la construction de l'AAB
    -SkipTests               Ignorer l'ex√©cution des tests
    -AutoPromote             Promotion automatique vers Production si m√©triques OK
    -MonitoringHours INT     Dur√©e de surveillance en heures (d√©faut: 48)
    -CrashThreshold DOUBLE   Seuil de crash rate en % (d√©faut: 2.0)
    -ANRThreshold DOUBLE     Seuil d'ANR rate en % (d√©faut: 1.0)
    -Verbose                 Mode verbeux
    -Help                    Affiche cette aide

EXEMPLES:
    # Publication compl√®te avec surveillance standard
    .\publish-and-monitor.ps1
    
    # Publication rapide sans tests avec promotion automatique
    .\publish-and-monitor.ps1 -SkipTests -AutoPromote
    
    # Publication avec surveillance personnalis√©e (24h, seuils stricts)
    .\publish-and-monitor.ps1 -MonitoringHours 24 -CrashThreshold 1.0 -ANRThreshold 0.5
    
    # Surveillance uniquement (AAB d√©j√† publi√©)
    .\publish-and-monitor.ps1 -SkipBuild -SkipTests

PR√âREQUIS:
    - Google Play Console configur√©
    - Credentials GOOGLE_PLAY_JSON_KEY_PATH ou GOOGLE_PLAY_JSON_KEY_DATA
    - Fastlane install√© et configur√©
    - AAB sign√© disponible (si -SkipBuild non sp√©cifi√©)

FLUX COMPLET:
    [APP] Construction AAB -> [TEST] Tests -> [UPLOAD] Publication Internal -> [MONITOR] Surveillance 48h -> [PROD] Production
"@
}

# V√©rification des pr√©requis
function Test-Prerequisites {
    Write-ColorOutput "[CHECK] V√©rification des pr√©requis..." "Yellow"
    
    # V√©rifier Fastlane
    try {
        $null = Get-Command fastlane -ErrorAction Stop
        Write-ColorOutput "   [OK] Fastlane install√©" "Green"
    } catch {
        Write-ColorOutput "   [X] Fastlane non trouv√©. Installez-le avec: gem install fastlane" "Red"
        return $false
    }
    
    # V√©rifier les credentials Google Play
    $googlePlayKeyPath = $env:GOOGLE_PLAY_JSON_KEY_PATH
    $googlePlayKeyData = $env:GOOGLE_PLAY_JSON_KEY_DATA
    
    if (-not $googlePlayKeyPath -and -not $googlePlayKeyData) {
        Write-ColorOutput "   [X] Credentials Google Play non configur√©s!" "Red"
        Write-ColorOutput "      Configurez GOOGLE_PLAY_JSON_KEY_PATH ou GOOGLE_PLAY_JSON_KEY_DATA" "Red"
        return $false
    }
    
    if ($googlePlayKeyPath -and -not (Test-Path $googlePlayKeyPath)) {
        Write-ColorOutput "   [X] Fichier de credentials non trouv√©: $googlePlayKeyPath" "Red"
        return $false
    }
    
    Write-ColorOutput "   [OK] Credentials Google Play configur√©s" "Green"
    
    # V√©rifier les scripts de surveillance
    $monitorScript = Join-Path $ScriptDir "monitor-stability.ps1"
    if (-not (Test-Path $monitorScript)) {
        Write-ColorOutput "   [X] Script de surveillance non trouv√©: $monitorScript" "Red"
        return $false
    }
    
    Write-ColorOutput "   [OK] Script de surveillance disponible" "Green"
    
    return $true
}

# Construction de l'AAB
function Build-AAB {
    if ($SkipBuild) {
        Write-ColorOutput "[SKIP] Construction ignor√©e (SkipBuild activ√©)" "Yellow"
        return $true
    }
    
    Write-ColorOutput "[BUILD] Construction de l'AAB..." "Yellow"
    
    try {
        # Nettoyage
        & ./gradlew clean
        
        # Construction de l'AAB de release
        & ./gradlew bundleRelease
        
        # V√©rification que l'AAB a √©t√© cr√©√©
        $aabPath = "app/build/outputs/bundle/release/app-release.aab"
        if (Test-Path $aabPath) {
            $aabSize = [math]::Round((Get-Item $aabPath).Length / 1MB, 1)
            Write-ColorOutput "   [OK] AAB cr√©√© avec succ√®s: $aabPath ($aabSize MB)" "Green"
            return $true
        } else {
            Write-ColorOutput "   [X] AAB non trouv√© apr√®s construction" "Red"
            return $false
        }
    } catch {
        Write-ColorOutput "   [X] Erreur lors de la construction: $($_.Exception.Message)" "Red"
        return $false
    }
}

# Ex√©cution des tests
function Run-Tests {
    if ($SkipTests) {
        Write-ColorOutput "[SKIP] Tests ignor√©s (SkipTests activ√©)" "Yellow"
        return $true
    }
    
    Write-ColorOutput "[TEST] Ex√©cution des tests..." "Yellow"
    
    try {
        # Tests unitaires
        & ./gradlew test
        
        # Tests d'instrumentation (optionnel, peut n√©cessiter un √©mulateur)
        # & ./gradlew connectedAndroidTest
        
        Write-ColorOutput "   [OK] Tests ex√©cut√©s avec succ√®s" "Green"
        return $true
    } catch {
        Write-ColorOutput "   [X] √âchec des tests: $($_.Exception.Message)" "Red"
        return $false
    }
}

# Publication sur le track Internal
function Publish-ToInternal {
    Write-ColorOutput "[UPLOAD] Publication sur le track Internal..." "Yellow"
    
    try {
        # Utilisation de Fastlane pour publier
        & fastlane android internal
        
        Write-ColorOutput "   [OK] Publication r√©ussie sur le track Internal" "Green"
        Write-ColorOutput "   [WEB] V√©rifiez dans Google Play Console: https://play.google.com/console/developers" "Cyan"
        return $true
    } catch {
        Write-ColorOutput "   [X] Erreur lors de la publication: $($_.Exception.Message)" "Red"
        return $false
    }
}

# Surveillance des m√©triques
function Start-Monitoring {
    Write-ColorOutput "[MONITOR] D√©marrage de la surveillance des m√©triques..." "Yellow"
    Write-ColorOutput "   [TIME] Dur√©e: $MonitoringHours heures" "Cyan"
    Write-ColorOutput "   [TARGET] Seuils: Crash moins de $CrashThreshold%, ANR moins de $ANRThreshold%" "Cyan"
    
    $monitorScript = Join-Path $ScriptDir "monitor-stability.ps1"
    
    try {
        # Lancement du script de surveillance
        $result = & $monitorScript -PackageName $PackageName -MonitoringHours $MonitoringHours -CrashThreshold $CrashThreshold -ANRThreshold $ANRThreshold -Verbose:$Verbose
        
        if ($LASTEXITCODE -eq 0) {
            Write-ColorOutput "   [OK] Surveillance termin√©e - M√©triques conformes" "Green"
            return $true
        } else {
            Write-ColorOutput "   [X] Surveillance termin√©e - M√©triques non conformes" "Red"
            return $false
        }
    } catch {
        Write-ColorOutput "   [X] Erreur lors de la surveillance: $($_.Exception.Message)" "Red"
        return $false
    }
}

# Promotion vers Production
function Promote-ToProduction {
    if (-not $AutoPromote) {
        Write-ColorOutput "[MANUAL] Promotion manuelle requise" "Yellow"
        Write-ColorOutput "   Pour promouvoir vers Production, ex√©cutez:" "Cyan"
        Write-ColorOutput "   fastlane android production" "Cyan"
        return $true
    }
    
    Write-ColorOutput "[AUTO] Promotion automatique vers Production..." "Yellow"
    
    try {
        & fastlane android production
        
        Write-ColorOutput "   [OK] Promotion r√©ussie vers Production" "Green"
        Write-ColorOutput "   [SUCCESS] Application disponible en Production!" "Green"
        return $true
    } catch {
        Write-ColorOutput "   [X] Erreur lors de la promotion: $($_.Exception.Message)" "Red"
        return $false
    }
}

# Fonction principale
function Start-PublishAndMonitor {
    $startTime = Get-Date
    
    Write-ColorOutput "" "White"
    Write-ColorOutput "[START] D√âMARRAGE DU PROCESSUS COMPLET DE PUBLICATION" "Green"
    Write-ColorOutput "" "White"
    Write-ColorOutput "[APP] Package: $PackageName" "Cyan"
    Write-ColorOutput "   [TIME] Surveillance: $MonitoringHours heures" "Cyan"
    Write-ColorOutput "[TARGET] Seuils: Crash moins de $CrashThreshold%, ANR moins de $ANRThreshold%" "Cyan"
    Write-ColorOutput "[AUTO] Promotion auto: $(if ($AutoPromote) { 'Activ√©e' } else { 'D√©sactiv√©e' })" "Cyan"
    Write-ColorOutput "" "White"
    
    # √âtape 1: V√©rification des pr√©requis
    Write-ColorOutput "[STEP 1/5] V√©rification des pr√©requis" "Magenta"
    if (-not (Test-Prerequisites)) {
        Write-ColorOutput "[X] √âchec des pr√©requis" "Red"
        return $false
    }
    Write-ColorOutput "" "White"
    
    # √âtape 2: Construction
    Write-ColorOutput "[STEP 2/5] Construction de l'AAB" "Magenta"
    if (-not $SkipBuild) {
        if (-not (Build-AAB)) {
            Write-ColorOutput "[X] √âchec de la construction" "Red"
            return $false
        }
    } else {
        Write-ColorOutput "[SKIP] Construction ignor√©e (SkipBuild activ√©)" "Yellow"
    }
    Write-ColorOutput "" "White"
    
    # √âtape 3: Tests
    Write-ColorOutput "[STEP 3/5] Ex√©cution des tests" "Magenta"
    if (-not $SkipTests) {
        if (-not (Run-Tests)) {
            Write-ColorOutput "[X] √âchec des tests" "Red"
            return $false
        }
    } else {
        Write-ColorOutput "[SKIP] Tests ignor√©s (SkipTests activ√©)" "Yellow"
    }
    Write-ColorOutput "" "White"
    
    # √âtape 4: Publication
    Write-ColorOutput "[STEP 4/5] Publication sur Internal" "Magenta"
    if (-not (Publish-ToInternal)) {
        Write-ColorOutput "[X] √âchec de la publication" "Red"
        return $false
    }
    Write-ColorOutput "" "White"
    
    # √âtape 5: Surveillance
    Write-ColorOutput "[STEP 5/5] Surveillance des m√©triques" "Magenta"
    $monitoringSuccess = Start-Monitoring
    Write-ColorOutput "" "White"
    
    # R√©sum√© final
    $endTime = Get-Date
    $totalDuration = $endTime - $startTime
    
    Write-ColorOutput "[FINISHED] PROCESSUS TERMIN√â" "Green"
    Write-ColorOutput "" "White"
    Write-ColorOutput "[SUMMARY] R√âSUM√â:" "Cyan"
    Write-ColorOutput "   [TIME] Dur√©e totale: $([math]::Round($totalDuration.TotalHours, 1)) heures" "White"
    Write-ColorOutput "   [APP] Package: $PackageName" "White"
    Write-ColorOutput "   [UPLOAD] Publication Internal: [OK] R√©ussie" "Green"
    Write-ColorOutput "   [MONITOR] Surveillance 48h: $(if ($monitoringSuccess) { '[OK] Conforme' } else { '[X] Non conforme' })" $(if ($monitoringSuccess) { "Green" } else { "Red" })
    
    if ($monitoringSuccess) {
        Write-ColorOutput "   [PROD] Statut Production: $(if ($AutoPromote) { '[OK] Promue automatiquement' } else { '[MANUAL] Promotion manuelle requise' })" $(if ($AutoPromote) { "Green" } else { "Yellow" })
        
        if ($AutoPromote) {
            Promote-ToProduction | Out-Null
        }
    } else {
        Write-ColorOutput "   [PROD] Statut Production: [X] Promotion bloqu√©e (m√©triques non conformes)" "Red"
    }
    
    Write-ColorOutput "" "White"
    
    if ($monitoringSuccess) {
        Write-ColorOutput "üéâ SUCC√àS: Application pr√™te pour la production!" "Green"
        return $true
    } else {
        Write-ColorOutput "[!] ATTENTION: Corrigez les probl√®mes et relancez le processus" "Yellow"
        return $false
    }
}

# Point d'entr√©e principal
if ($Help) {
    Show-Help
    exit 0
}

# Validation des param√®tres
if ($MonitoringHours -le 0) {
    Write-ColorOutput "[X] La dur√©e de surveillance doit √™tre positive" "Red"
    exit 1
}

if ($CrashThreshold -le 0 -or $ANRThreshold -le 0) {
    Write-ColorOutput "[X] Les seuils doivent √™tre positifs" "Red"
    exit 1
}

# Changement vers le r√©pertoire du projet
Set-Location $ProjectRoot

# D√©marrage du processus
try {
    if (Start-PublishAndMonitor) {
        exit 0  # Succ√®s
    } else {
        exit 1  # √âchec
    }
} catch {
    Write-ColorOutput "[X] Erreur fatale: $($_.Exception.Message)" "Red"
    exit 2  # Erreur syst√®me
}