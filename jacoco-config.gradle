// Configuration JaCoCo pour la couverture de code automatisée
// À inclure dans app/build.gradle.kts

apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.8"
}

android {
    buildTypes {
        debug {
            testCoverageEnabled = true
        }
    }
}

tasks.register('jacocoTestReport', JacocoReport) {
    dependsOn 'testDebugUnitTest'
    
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    
    def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*Test*.*',
        'android/**/*.*',
        '**/databinding/**/*.*',
        '**/generated/**/*.*'
    ]
    
    def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: fileFilter)
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    
    classDirectories.setFrom(files([debugTree, kotlinDebugTree]))
    
    sourceDirectories.setFrom(files([
        'src/main/java',
        'src/main/kotlin'
    ]))
    
    executionData.setFrom(fileTree(dir: buildDir, includes: [
        'jacoco/testDebugUnitTest.exec',
        'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'
    ]))
}

// Tâche pour générer un rapport de couverture combiné
tasks.register('jacocoFullReport', JacocoReport) {
    dependsOn 'testDebugUnitTest'
    dependsOn 'createDebugCoverageReport'
    
    reports {
        xml.required = true
        html.required = true
        csv.required = true
    }
    
    def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*Test*.*',
        'android/**/*.*',
        '**/databinding/**/*.*',
        '**/generated/**/*.*'
    ]
    
    def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: fileFilter)
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    
    classDirectories.setFrom(files([debugTree, kotlinDebugTree]))
    
    sourceDirectories.setFrom(files([
        'src/main/java',
        'src/main/kotlin'
    ]))
    
    executionData.setFrom(fileTree(dir: buildDir, includes: [
        'jacoco/testDebugUnitTest.exec',
        'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'
    ]))
}

// Configuration des seuils de couverture
tasks.register('jacocoCoverageVerification', JacocoCoverageVerification) {
    dependsOn 'jacocoTestReport'
    
    violationRules {
        rule {
            limit {
                minimum = 0.70 // 70% minimum
            }
        }
        
        rule {
            enabled = true
            element = 'CLASS'
            includes = ['com.example.n8nmonitor.*']
            
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.60 // 60% minimum par classe
            }
        }
    }
}

// Exclure les fichiers générés et les tests
def excludedFiles = [
    '**/R.class',
    '**/R$*.class',
    '**/BuildConfig.*',
    '**/Manifest*.*',
    '**/*Test*.*',
    '**/*Tests*.*',
    'android/**/*.*',
    '**/databinding/**/*.*',
    '**/generated/**/*.*',
    '**/di/**/*.*', // Modules Hilt
    '**/hilt_aggregated_deps/**/*.*'
]

// Tâche personnalisée pour rapport HTML amélioré
tasks.register('coverageReport') {
    group = 'verification'
    description = 'Generate code coverage report'
    dependsOn 'jacocoTestReport'
    
    doLast {
        println "Coverage report generated at: ${buildDir}/reports/jacoco/jacocoTestReport/html/index.html"
    }
}

// Intégration avec les tâches de test
tasks.named('testDebugUnitTest').configure {
    finalizedBy 'jacocoTestReport'
}

tasks.named('jacocoTestReport').configure {
    finalizedBy 'jacocoCoverageVerification'
}